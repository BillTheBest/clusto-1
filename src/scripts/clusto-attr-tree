#!/usr/bin/env python
"""Display clusto object attributes, optionally recursively and in color."""

import sys

import clusto
from clusto import script_helper


class Colors(object):

    """ANSI color escape sequences class."""

    mapping = {'BRIGHT': '\033[1m',
               'GREEN': '\033[32m',
               'MAGENTA': '\033[35m',
               'YELLOW': '\033[33m',
               'RESET': '\033[0m'}

    def __init__(self, enabled=False):
        """Construct instance with color enabled or disabled."""
        # Could default to true if stdout is a tty and not on Windows,
        # but for now we don't try to guess.
        self.enabled = enabled

    def __getattr__(self, name):
        """Return ANSI color escape sequence if color is enabled."""
        if self.enabled:
            return self.mapping[name]
        else:
            assert name in self.mapping
            return ''


class AttrTree(script_helper.Script):

    """
    Display clusto object attributes, optionally recursively and in color.

    This script queries for attributes of a clusto object and optionally its
    parent containers, recursively. It displays a simple indented tree,
    optionally with different colors for clusto keys, subkeys, and values.

    """

    def print_obj(self, obj, indent=0, color=False):
        """Print object attributes, optionally in color and indented."""
        colors = Colors(enabled=color)

        # Clusto object name.
        txt = "{indent}* {name}".format(
            indent=" " * indent,
            name=colors.BRIGHT + obj.name + colors.RESET)

        # Clusto object attributes.
        for x in obj.attrs():
            txt += "\n{indent} {key}.{subkey} = {value}".format(
                indent=" " * (indent) + "|",
                key=colors.GREEN + str(x.key) + colors.RESET,
                subkey=colors.MAGENTA + str(x.subkey) + colors.RESET,
                value=colors.YELLOW + str(x.value) + colors.RESET
            )

        print("{}\n".format(txt))

    def print_tree(self, root, indent=0, color=False):
        """Print parent container object attributes, recursively."""
        # Alternatively, we could call obj.attrs(merge_container_attrs=True),
        # and use the entity attribute of each clusto attribute to
        # recreate the tree.
        for parent in root.parents():
            self.print_obj(parent, indent=indent, color=color)
            self.print_tree(parent, indent=indent + 1, color=color)

    def run(self, args):
        """Execute script, passing script arguments to methods."""
        obj = clusto.get_by_name(args.obj)
        self.print_obj(obj, indent=0, color=args.color)
        if args.recurse:
            self.print_tree(obj, indent=1, color=args.color)

    def _add_arguments(self, parser):
        parser.add_argument('obj', metavar='object',
                            help="object to query for attributes")
        parser.add_argument('-r', '--recurse', action='store_true',
                            default=False,
                            help="query parent attributes, recursively")
        parser.add_argument('-c', '--color', action='store_true',
                            default=False,
                            help="enable color output")


def main():
    """Execute script with clusto script_helper."""
    attr, args = script_helper.init_arguments(AttrTree)
    return attr.run(args)

if __name__ == '__main__':
    sys.exit(main())
